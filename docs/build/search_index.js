var documenterSearchIndex = {"docs":
[{"location":"lib/functions/#","page":"Functions","title":"Functions","text":"CurrentModule = AbstractLogic","category":"page"},{"location":"lib/functions/#Functions-1","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"lib/functions/#","page":"Functions","title":"Functions","text":"Pages = [\"functions.md\"]","category":"page"},{"location":"lib/functions/#General-Functions-1","page":"Functions","title":"General Functions","text":"","category":"section"},{"location":"lib/functions/#","page":"Functions","title":"Functions","text":"checkfeasible\r\nLogicalCombo\r\nlogicalparse\r\nlogicalrepl\r\nsearch\r\nshowfeasible","category":"page"},{"location":"lib/functions/#AbstractLogic.checkfeasible","page":"Functions","title":"AbstractLogic.checkfeasible","text":"checkfeasible(command::String, logicset::LogicalCombo; verbose=true, force=false, countany=false)\n\nIs called when the user would like to check if a command produces a valid result, possible result, or invalid result. The result is returned as a decimal from 0.0 to 1.0. With 0.0 being no matches and 1.0 being all matches.\n\nArguments\n\nverbose : controls print\nforce : all sets have to be feasible or return 0\ncountany : any set can be non-zero to return 1\n\nExamples\n\njulia> myset = logicalparse(\"a, b, c ∈ red, blue, green\")\na, b, c ∈ red, blue, green       feasible outcomes 27 ✓          :red blue blue\n\njulia> myset = logicalparse(\"a != b,c; b = c ==> a = 'blue'\", myset)\na != b,c                 feasible outcomes 12 ✓          :green blue blue\nb = c ==> a = 'blue'     feasible outcomes 8 ✓           :blue green green\n\njulia> checkfeasible(\"a = 'green' ==> b = 'red'\", myset)\nCheck: a = 'green' ==> b = 'red' ... a = 'green' ==> b = 'red'   feasible outcomes 17 ✓          :blue red green\npossible,  17 out of 21 possible combinations 'true'.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#AbstractLogic.logicalparse","page":"Functions","title":"AbstractLogic.logicalparse","text":"logicalparse\n\nTakes a command and parses it into logical calls that either assigning additional feasible variable ranges or constrain the relationship between variables.\n\nlogicalparse(command::String; logicset::LogicalCombo = LogicalCombo(), verbose=true)\nlogicalparse(command::String, logicset::LogicalCombo; ...)\nlogicalparse(commands::Array{String,1}, logicset::LogicalCombo; ...)\nlogicalparse(commands::Array{String,1}; ...)\n\nArguments\n\nverbose : specifies to print to screen or not\n\nOperators\n\nThere are numerous operators available to be used in the logical parse command.\n\nExamples\n\njulia> myset = logicalparse(\"a, b, c in 1:3\")\na,b,c in 1:3             feasible outcomes 27 ✓          :3 3 3\n\njulia> myset = logicalparse(\"a == b\", myset)\na == b                   feasible outcomes 9 ✓           :1 1 2\n\njulia> myset = logicalparse(\"a > c\", myset)\na > c                    feasible outcomes 3 ✓           :3 3 1\n\njulia> myset = logicalparse(\"c != 1\", myset)\nc != 1                   feasible outcomes 1 ✓✓          :3 3 2\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#AbstractLogic.logicalrepl","page":"Functions","title":"AbstractLogic.logicalrepl","text":"logicalrepl(;preserve = false)\n\nEnter the psuedo REPL for abstract logical reasoning.\n\njulia> logicalrepl()\nWelcome to the abstract logic solver interactive mode!\n'exit' to exit\n'clear' to empty the environment space\n'search {followed by search}' to search the environment space\n'back' to return to previous state or 'forward' to move forward\n\nAL: a, b, c in 1:3\na, b, c ∈ 1:3            feasible outcomes 27 ✓          :1 1 3\n\nAL: a == b\na == b                   feasible outcomes 9 ✓           :3 3 3\n\nAL: a > c\na > c                    feasible outcomes 3 ✓           :3 3 1\n\nAL: c != 1\nc != 1                   feasible outcomes 1 ✓✓          :3 3 2\n\nAL: exit\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#AbstractLogic.search","page":"Functions","title":"AbstractLogic.search","text":"search(command::String, logicset::LogicalCombo; verbose=true)\n\nSearches for a possible match among a LogicalCombo in which the wildcard term is true. Search requires the use of a wildcard. In the event that a wildcard is missing, search will insert a {{i}} to the left of the command.{{i+1}} can be used to search for relationships between the ith column and another column.\n\nExamples\n\njulia> myset = logicalparse(\"v1, v2, v3 ∈ 1:10\")\nv1, v2, v3 ∈ 1:10        feasible outcomes 1000 ✓        :6 6 10\n\njulia> myset = logicalparse(\"{{i}} >> {{i+1}}\", myset)\n{{i}} >> {{i+1}}\n>>> v1 >> v2\n>>> v2 >> v3\n         feasible outcomes 56 ✓          :10 7 3\n\njulia> search(\"{{i}} == 4\", myset)\nChecking: v1 == 4\nChecking: v2 == 4\nChecking: v3 == 4\n\n:v1 is a not match with 0 feasible combinations out of 56.\n:v2 is a possible match with 10 feasible combinations out of 56.\n:v3 is a possible match with 6 feasible combinations out of 56.\n\njulia> search(\"== 4\", myset, verbose=false) == search(\"{{i}} == 4\", myset, verbose=false)\ntrue\n\njulia> search(\"{{i}} > {{!i}}\", myset)\nChecking: v1 > v2\nChecking: v1 > v3\nChecking: v2 > v1\nChecking: v2 > v3\nChecking: v3 > v1\nChecking: v3 > v2\n\n:v1 is a match with 56 feasible combinations out of 56.\n:v2 is a not match with 0 feasible combinations out of 56.\n:v3 is a not match with 0 feasible combinations out of 56.\n\n\n\n\n\n","category":"function"},{"location":"lib/functions/#AbstractLogic.showfeasible","page":"Functions","title":"AbstractLogic.showfeasible","text":"showfeasible\n\nCollects a matrix of only feasible outcomes given the parameter space and the constraints. Use collect to output a matrix of all possible matches for parameter space.\n\nExamples\n\njulia> myset = logicalparse(\"a, b, c in 1:3\")\na,b,c in 1:3             feasible outcomes 27 ✓          :3 3 3\n\njulia> myset = logicalparse(\"a == b; c > b\", myset)\na == b                   feasible outcomes 9 ✓           :1 1 3\nc > b                    feasible outcomes 3 ✓           :2 2 3\n\njulia> showfeasible(myset)\n3×3 Array{Int64,2}:\n 1  1  2\n 1  1  3\n 2  2  3\n\n\n\n\n\n","category":"function"},{"location":"man/getting_started/#Getting-Started-1","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"man/getting_started/#Installation-1","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"The AbstractLogic package is available through gitbub and can be installed using the following commands after entering the package REPL by typeing ] in the console.","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"pkg> dev https://github.com/EconometricsBySimulation/AbstractLogic.jl","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"Leave the package REPL by hitting <backspace>. Now you can use the AbstractLogic package anytime by typing using AbstractLogic in Julia.","category":"page"},{"location":"man/getting_started/#Interacting-with-AbstractLogic-1","page":"Getting Started","title":"Interacting with AbstractLogic","text":"","category":"section"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"There are two basic methods of interacting with the solver: logicalparse and logicalrepl. logicalparse is generally preferred when programmatically interacting with the solver while logicalrepl is convenient when interacting with the solver less formally.","category":"page"},{"location":"man/getting_started/#Julia-AbstractLogic-Functions:-logicalparse,-checkfeasible,-search-1","page":"Getting Started","title":"Julia AbstractLogic Functions: logicalparse, checkfeasible, search","text":"","category":"section"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"One method is using Julia functions mainly logicalparse, checkfeasible, and search. This method relies primarily on LogicalCombo objects which are generated from and can be passed into logicalparse.","category":"page"},{"location":"man/getting_started/#Setting-up-a-logical-set-1","page":"Getting Started","title":"Setting up a logical set","text":"","category":"section"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"To set up an initial logical set. Pass a text command to logicalparse with the variable names on the left and range of possible values on the left with the ∈ or in operator in between.","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"julia> logicalset = logicalparse(\"a, b, c ∈ 1, 2, 3\")\r\na, b, c ∈ 1, 2, 3        feasible outcomes 27 ✓          :3 1 3","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"logicalparse will now generate a lookup object of type LogicalCombo which tells AbstractLogic options what combinations feasible as well as which ones have been excluded. Every time logicalparse runs it prints the number of feasible outcomes in the set given the current constraints as well as a random single feasible value that the variables can hold.","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"While many logical problems do have equivalent value ranges for each variable AbstractLogic has no such constraint. Additional variables can be added to a set in an equivalent as those added upon set initiation.","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"julia> logicalset = logicalparse(\"d ∈ 4,5\", logicalset)\r\nd ∈ 4,5                          feasible outcomes 54 ✓          :2 1 1 5","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"Variable values need not be of the same type.","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"julia> logicalset = logicalparse(\"bob, ali ∈ old, young\", logicalset)\r\nbob, ali ∈ old, young    feasible outcomes 216 ✓         :3 2 3 5 young old","category":"page"},{"location":"man/getting_started/#Constraining-the-logical-set-1","page":"Getting Started","title":"Constraining the logical set","text":"","category":"section"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"logicalparse is also the command used to set constraints on the logical set. These constraints are defined through use of operators expressing relationships between variables or constants.","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"Forcing variable a to take on the same value as variable c we could write.","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"julia> logicalset = logicalparse(\"a = c\", logicalset)\r\na = c                    feasible outcomes 72 ✓          :2 3 2 5 young young","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"We can also force variables to take the value of a constant.","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"julia> logicalset = logicalparse(\"b = 2\", logicalset)\r\nb = 2                    feasible outcomes 24 ✓          :2 2 2 4 old old","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"Though constant strings need be quoted as they would otherwise be attempted to be parsed as variables.","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"julia> logicalset = logicalparse(\"ali = 'old'\", logicalset)\r\nali = 'old'              feasible outcomes 12 ✓          :3 2 3 4 old old","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"Perhaps we would like to force Ali to be a different age than Bob.","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"julia> logicalset = logicalparse(\"ali != bob\", logicalset)\r\nali != bob               feasible outcomes 6 ✓           :2 2 2 4 young old","category":"page"},{"location":"man/getting_started/#Checking-the-Feasibility-of-a-Statement-1","page":"Getting Started","title":"Checking the Feasibility of a Statement","text":"","category":"section"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"We might often like to check the feasiblility of a claim. Perhaps we would like to ask if Bob is young.","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"julia> checkfeasible(\"bob == 'young'\", logicalset)\r\nCheck: bob == 'young' ... bob == 'young'                 feasible outcomes 6 ✓           :3 2 3 4 young old\r\ntrue, 6 out of 6 possible combinations 'true'.\r\n2-element Array{Any,1}:\r\n 1.0\r\n\r\n  LogicalCombo(Symbol[:a, :b, :c, :d, :bob, :ali], Array{T,1} where T[[1, 2, 3], [1, 2, 3], [1, 2, 3], [4, 5], [\"old\", \"young\"], [\"old\", \"young\"]], Bool[false, false, false, false, false, false, false, false, false, false  …  false, false, false, false, false, false, false, false, false, false])","category":"page"},{"location":"man/getting_started/#Search-for-a-Possible-Match-1","page":"Getting Started","title":"Search for a Possible Match","text":"","category":"section"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"We might instead want to ask the question, which variables could take on a value equal to 3.","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"julia> search(\"== 3 \", logicalset)\r\nChecking: a == 3\r\nChecking: b == 3\r\nChecking: c == 3\r\nChecking: d == 3\r\nChecking: bob == 3\r\nChecking: ali == 3\r\n\r\n:a is a possible match with 2 feasible combinations out of 6.\r\n:b is a not match with 0 feasible combinations out of 6.\r\n:c is a possible match with 2 feasible combinations out of 6.\r\n:d is a not match with 0 feasible combinations out of 6.\r\n:bob is a not match with 0 feasible combinations out of 6.\r\n:ali is a not match with 0 feasible combinations out of 6.\r\n6-element Array{Float64,1}:\r\n 0.3333333333333333\r\n 0.0\r\n 0.3333333333333333\r\n 0.0\r\n 0.0\r\n 0.0\r\n ```\r\nFrom this we can see that variables a and c are possible matches.\r\n\r\n### Julia logicalrepl\r\nAlternatively you can interact with the logical problem solver through the psuedo-repl interface. It is initiated by in julia by calling the `logicalrepl` function.\r\n","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"julia julia> logicalrepl() Welcome to the abstract logic solver interactive mode! Type 'exit' to exit. 'clear' to clear the environment space 'search {followed by search}' to search the environment space 'back' to return to previous state or 'next' to move forward","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"\r\n#### Setting up a logical set\r\nThe interface is much cleaner to work with.","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"julia julia> logicalrepl() ...","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"AL: a, b, c ∈ 1, 2, 3 a, b, c ∈ 1, 2, 3        feasible outcomes 27 ✓          :1 3 3","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"AL: d ∈ 3, 4, 5 d ∈ 3, 4, 5              feasible outcomes 81 ✓          :2 3 3 4","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"AL: e,f in red, green, blue e,f ∈ red, green, blue   feasible outcomes 729 ✓         :2 3 3 4 red red","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"\r\n#### Constraining the logical set\r\nWriting contraints within the `repl` is largely equivalent to that of `logicalparse`.","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"julia AL: a = c a = c                    feasible outcomes 243 ✓         :3 1 3 3 red blue","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"AL: e != f e != f                   feasible outcomes 162 ✓         :1 1 1 3 blue green","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"\r\nWe can also force variables to take the value of a constant.","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"julia AL: f = 'blue' f = 'blue'               feasible outcomes 54 ✓          :2 3 2 4 red blue","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"\r\n#### Checking the Feasibility of a Statement\r\nWe might often like to check the feasiblility of a claim. This is done with the check command","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"julia AL: check a=2 Check: a=2 ... a=2                       feasible outcomes 18 ✓          :2 1 2 4 green blue possible,  18 out of 54 possible combinations 'true'.","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"\r\n#### Search for a Possible Match\r\nWe might instead want to ask the question, which variables could take on a value equal to 3.","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"julia AL: search ==3","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":"Checking: a ==3 Checking: b ==3 Checking: c ==3 Checking: d ==3 Checking: e ==3 Checking: f ==3","category":"page"},{"location":"man/getting_started/#","page":"Getting Started","title":"Getting Started","text":":a is a possible match with 18 feasible combinations out of 54. :b is a possible match with 18 feasible combinations out of 54. :c is a possible match with 18 feasible combinations out of 54. :d is a possible match with 18 feasible combinations out of 54. :e is a not match with 0 feasible combinations out of 54. :f is a not match with 0 feasible combinations out of 54. ```","category":"page"},{"location":"#AbstractLogic.jl-1","page":"Introduction","title":"AbstractLogic.jl","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Welcome to AbstractLogic documentation!","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"This resource aims at teaching you everything you will need for using the intuitive Abstract Logic problem solver in the Julia language.","category":"page"},{"location":"#Introduction-1","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"#What-is-an-abstract-logic-solver?-1","page":"Introduction","title":"What is an abstract logic solver?","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Abstract logic problems come in many forms. This solver specifically is built to handle verbal abstract logic problems which have a finite number of possible permutations. Verbal abstract reasoning problems are often found in cognitive testing environments such as employee aptitude testing and prominently as a section on the Law School Entrance Exam.","category":"page"},{"location":"#Why-an-abstract-logic-solver?-1","page":"Introduction","title":"Why an abstract logic solver?","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"The cost of hand writing and evaluating items can be expensive. Abstract logic items are easy to write but relatively hard to evaluate. This package goes a long way to reducing the cost of evaluating items and is intended as a tool to aid in the generation of large batches of abstract reasoning items.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"The need for large batches of items stems from a great deal of interest by test takers in illegally obtaining copies of items from high stakes exams. Cheating on high stakes exams is known to be common. This forces testing companies to spend a great deal of resources protecting their intellectual capital while also creating an environment in which they finds themselves vulnerable to accusations of secrecy. Producing tools that reduce the cost of generating and evaluating items has the promise of alleviating concerns over item exposure.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"In addition to the benefit to testing companies of reduced cost items, reducing the cost of items has the promise of aiding in the production of items for the use by researchers and companies interested in evaluating the efforts and aptitudes of their employees who do not have the means of producing their own instrument or of obtaining and providing a secure environment for the deployment of a commercial instrument.","category":"page"},{"location":"#A-Simple-Example-1","page":"Introduction","title":"A Simple Example","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"A typical kind of problem which one might have encountered in an aptitude test at some point in ones life might look like the following.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Peter is younger than Susan. Sam is younger than Susan but older than Ali.\r\nLi is older than Ali younger than Peter.\r\n\r\nWho must be the oldest?\r\na) Peter b) Susan c) Sam d) Li e) Ali f) Cannot Tell\r\n\r\nWho must be the youngest?\r\na) Peter b) Susan c) Sam d) Li e) Ali f) Cannot Tell\r\n\r\nWho could be the same age as Li?\r\na) Peter b) Susan c) Sam d) Ali e) Nobody f) Cannot Tell","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"The package AbstractLogic provides a tool for easily evaluating such problems. First lets load in the feasible matches. Because there are 5 people in the problem we can assign them 5 age categories which represent cardinal ordered ages rather than","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"julia> myls = logicalparse([\"Peter, Susan, Sam, Li, Ali ∈ 1, 2, 3, 4, 5\"])\r\nPeter, Susan, Sam, Li, Ali ∈ 1, 2, 3, 4, 5       feasible outcomes 3125 ✓        :4 2 4 3 4\r\n\r\njulia> myls = logicalparse(\"Peter < Susan; Sam < Susan\", myls)\r\nPeter < Susan            feasible outcomes 1250 ✓        :2 3 3 4 4\r\nSam < Susan              feasible outcomes 750 ✓         :4 5 4 5 4\r\n\r\nmyls = logicalparse(\"Sam > Ali; Li > Ali; Li < Peter\", myls)\r\nSam > Ali                feasible outcomes 175 ✓         :1 3 2 3 1\r\nLi > Ali                 feasible outcomes 121 ✓         :4 5 2 5 1\r\nLi < Peter               feasible outcomes 13 ✓          :4 5 4 3 2\r\n\r\njulia> search(\"{{i}} > {{!i}}\", myls)\r\nChecking: Peter > Susan\r\nChecking: Peter > Sam\r\nChecking: Peter > Li\r\nChecking: Peter > Ali\r\nChecking: Susan > Peter\r\nChecking: Susan > Sam\r\nChecking: Susan > Li\r\nChecking: Susan > Ali\r\nChecking: Sam > Peter\r\nChecking: Sam > Susan\r\nChecking: Sam > Li\r\nChecking: Sam > Ali\r\nChecking: Li > Peter\r\nChecking: Li > Susan\r\nChecking: Li > Sam\r\nChecking: Li > Ali\r\nChecking: Ali > Peter\r\nChecking: Ali > Susan\r\nChecking: Ali > Sam\r\nChecking: Ali > Li\r\n\r\n:Peter is a not match with 0 feasible combinations out of 13.\r\n:Susan is a match with 13 feasible combinations out of 13.\r\n:Sam is a not match with 0 feasible combinations out of 13.\r\n:Li is a not match with 0 feasible combinations out of 13.\r\n:Ali is a not match with 0 feasible combinations out of 13.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"From this we can see that Susan is the oldest.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Who must be is the youngest? To check who is the youngest we can do the same but this time setting verbose=false to reduce the printing.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"julia> search(\"{{i}} < {{!i}}\", myls, verbose=false)\r\n5-element Array{Float64,1}:\r\n 0.0\r\n 0.0\r\n 0.0\r\n 0.0\r\n 1.0\r\n ```\r\nThe search function returns a ratio of feasible outcomes for each column\r\nrelative to total outcomes. A zero means no feasible combination exist that\r\nmatch while a 1 indicates a 100% match.\r\n\r\n`Who could be the same age as Li?`","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"julia julia> search(\"{{i}} = Li\", myls) Checking: Peter = Li Checking: Susan = Li Checking: Sam = Li Checking: Li = Li Checking: Ali = Li","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":":Peter is a not match with 0 feasible combinations out of 13. :Susan is a not match with 0 feasible combinations out of 13. :Sam is a possible match with 5 feasible combinations out of 13. :Li is a match with 13 feasible combinations out of 13. :Ali is a not match with 0 feasible combinations out of 13.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"From the results we can see that Sam could share ages with Li.\r\n\r\nBut Abstract Logic can handle problems much more complex then simple\r\ninequalities!\r\n\r\n### A More Complex Example","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"You would like to figure out your plans for the evenings this week. Each evening can do only one activity at most. There are only four options for what you can do each night: call home, work out, homework, or eat out with friends. Each week begins on Monday and ends on Sunday.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Your schedule is subject to the following constraints: You do homework at least twice a week You work out at least twice a week You do not work out on sequential days You only eat out if the next day you work out. You must call home at least once and at least three after the last call. Whatever you do on Friday must be different from what you do on Saturday or Sunday. You must do homework at least one night on Monday, Tuesday, or Wednesday You would like to eat out at least twice per week.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Questions:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Given these constraints what is the most number of times you can work out each week?","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"a) two b) three c) four","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"If you do homework on Monday what must be true?","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"a) Friday you do not do homework b) Wednesday you do not call home c) Saturday you do not workout d) Tuesday you do not workout","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Which of the following must be true?","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"a) If you call home on Monday then your Tuesday and Friday activity must be the same. b) If you call home on Tuesday then your Monday and Friday activity must be the same. c) If you call home on Wednesday then your Monday and Saturday activity must be the same. d) If you call home on Friday then your Tuesday and Sunday activity must be the same. e) If you call home on Saturday then your Monday and Wednesday activity must be the same.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"\r\nLet's input this problem into Abstract Logic syntax.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"julia julia> myls = logicalparse([\"mo, tu, we, th, fr, sa, su ∈ callhome, work out, homework, eat out\"]) #... feasible outcomes 16384 ✓       :workout workout workout eatout callhome callhome callhome","category":"page"},{"location":"#You-do-homework-at-least-twice-a-week-1","page":"Introduction","title":"You do homework at least twice a week","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"julia> myls = logicalparse([\"{{i}} = 'homework' {{2,}}\"], myls) #... feasible outcomes 9094 ✓        :callhome eatout eatout homework workout homework workout","category":"page"},{"location":"#You-work-out-at-least-twice-a-week-1","page":"Introduction","title":"You work out at least twice a week","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"myls = logicalparse([\"{{i}} = 'workout' {{2,}}\"], myls) #... feasible outcomes 4172 ✓        :callhome eatout workout workout eatout homework homework","category":"page"},{"location":"#You-do-not-work-out-on-sequential-days-1","page":"Introduction","title":"You do not work out on sequential days","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"myls = logicalparse([\"{{i}} == 'workout' ==> {{i}} != {{i+1}}\"], myls)","category":"page"},{"location":"#mo-'workout'-tu-!-'workout'-1","page":"Introduction","title":">>> mo == 'workout' ==> tu != 'workout'","text":"","category":"section"},{"location":"#...-1","page":"Introduction","title":"...","text":"","category":"section"},{"location":"#sa-'workout'-su-!-'workout'-1","page":"Introduction","title":">>> sa == 'workout' ==> su != 'workout'","text":"","category":"section"},{"location":"#...-feasible-outcomes-2302-:workout-homework-eatout-workout-homework-callhome-homework-1","page":"Introduction","title":"... feasible outcomes 2302 ✓        :workout homework eatout workout homework callhome homework","text":"","category":"section"},{"location":"#You-only-eat-out-if-the-next-day-you-work-out.-1","page":"Introduction","title":"You only eat out if the next day you work out.","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"myls = logicalparse([\"{{i}} = 'eatout' ==> {{i+1}} = 'workout'\"], myls)","category":"page"},{"location":"#mo-'eatout'-tu-'workout'-1","page":"Introduction","title":">>> mo = 'eatout' ==> tu = 'workout'","text":"","category":"section"},{"location":"#...-feasible-outcomes-1141-:eatout-workout-homework-homework-workout-homework-eatout-1","page":"Introduction","title":"... feasible outcomes 1141 ✓        :eatout workout homework homework workout homework eatout","text":"","category":"section"},{"location":"#Since-the-week-ends-on-Sunday-we-cannot-count-on-working-out-on-Monday-1","page":"Introduction","title":"Since the week ends on Sunday we cannot count on working out on Monday","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"myls = logicalparse([\"su != 'eatout'\"], myls)","category":"page"},{"location":"#...-feasible-outcomes-936-:callhome-workout-homework-homework-callhome-eatout-workout-1","page":"Introduction","title":"... feasible outcomes 936 ✓         :callhome workout homework homework callhome eatout workout","text":"","category":"section"},{"location":"#You-must-call-home-at-least-once-and-at-least-three-after-the-last-call.-1","page":"Introduction","title":"You must call home at least once and at least three after the last call.","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"myls = logicalparse(   [\"{{i}} = 'callhome' {{1,}}\",   \"{{i}} = 'callhome' ==> {{i+1}} != 'callhome'\",   \"{{i}} = 'callhome' ==> {{i+2}} != 'callhome'\"], myls)","category":"page"},{"location":"#...-feasible-outcomes-496-:callhome-workout-homework-homework-homework-workout-homework-1","page":"Introduction","title":"... feasible outcomes 496 ✓         :callhome workout homework homework homework workout homework","text":"","category":"section"},{"location":"#Whatever-you-do-on-Friday-must-be-different-from-what-you-do-on-Saturday-or-Sunday.-1","page":"Introduction","title":"Whatever you do on Friday must be different from what you do on Saturday or Sunday.","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"myls = logicalparse([\"fr != sa, su\"], myls)","category":"page"},{"location":"#...-feasible-outcomes-319-:homework-callhome-workout-eatout-workout-homework-callhome-1","page":"Introduction","title":"... feasible outcomes 319 ✓         :homework callhome workout eatout workout homework callhome","text":"","category":"section"},{"location":"#You-must-do-homework-at-least-one-night-on-Monday,-Tuesday,-or-Wednesday-1","page":"Introduction","title":"You must do homework at least one night on Monday, Tuesday, or Wednesday","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"myls = logicalparse([\"mo | tu | we = 'homework'\"], myls)","category":"page"},{"location":"#...-feasible-outcomes-278-:workout-callhome-homework-homework-callhome-workout-homework-1","page":"Introduction","title":"... feasible outcomes 278 ✓         :workout callhome homework homework callhome workout homework","text":"","category":"section"},{"location":"#Would-like-to-eat-out-at-least-twice-per-week.-1","page":"Introduction","title":"Would like to eat out at least twice per week.","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"myls = logicalparse([\"{{i}} = 'eatout' {{2,}}\"], myls)","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"\r\nNow for us to address the questions:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"julia","category":"page"},{"location":"#Question-1-1","page":"Introduction","title":"Question 1","text":"","category":"section"},{"location":"#Given-these-constraints-what-is-the-most-number-of-times-you-can-work-out-each-week?-1","page":"Introduction","title":"Given these constraints what is the most number of times you can work out each week?","text":"","category":"section"},{"location":"#a)-two-b)-three-c)-four-1","page":"Introduction","title":"a) two b) three c) four","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"checkfeasible(\"{{i}} = 'workout' {{2}}\", myls)","category":"page"},{"location":"#true,-18-out-of-18-possible-combinations-'true'.-1","page":"Introduction","title":"true, 18 out of 18 possible combinations 'true'.","text":"","category":"section"},{"location":"#We-could-check-the-others-but-we-know-that-in-all-18-feasible-permutations-1","page":"Introduction","title":"We could check the others but we know that in all 18 feasible permutations","text":"","category":"section"},{"location":"#you-can-only-work-out-twice-a-week.-1","page":"Introduction","title":"you can only work out twice a week.","text":"","category":"section"},{"location":"#Question-2-1","page":"Introduction","title":"Question 2","text":"","category":"section"},{"location":"#If-you-do-homework-on-Monday-what-must-be-true?-1","page":"Introduction","title":"If you do homework on Monday what must be true?","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"mylssub = logicalparse([\"mo = 'homework'\"], myls)","category":"page"},{"location":"#a)-Tuesday-you-do-not-eat-out-1","page":"Introduction","title":"a) Tuesday you do not eat out","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"checkfeasible(\"tu != 'eatout'\", mylssub, force=true)","category":"page"},{"location":"#Check:-tu-!-'eatout'-...-false,-4-out-of-10-possible-combinations-'true'.-1","page":"Introduction","title":"Check: tu != 'eatout' ... false, 4 out of 10 possible combinations 'true'.","text":"","category":"section"},{"location":"#b)-Wednesday-you-do-not-call-home-1","page":"Introduction","title":"b) Wednesday you do not call home","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"checkfeasible(\"we != 'callhome'\", mylssub, force=true) #... true, 10 out of 10 possible combinations 'true'.","category":"page"},{"location":"#c)-Friday-you-do-not-do-homework-1","page":"Introduction","title":"c) Friday you do not do homework","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"checkfeasible(\"fr != 'homework'\", mylssub, force=true)","category":"page"},{"location":"#...-false,-8-out-of-10-possible-combinations-'true'.-1","page":"Introduction","title":"... false, 8 out of 10 possible combinations 'true'.","text":"","category":"section"},{"location":"#d)-Saturday-you-do-not-workout-1","page":"Introduction","title":"d) Saturday you do not workout","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"checkfeasible(\"sa != 'workout'\", mylssub, force=true)","category":"page"},{"location":"#...-false,-6-out-of-10-possible-combinations-'true'.-1","page":"Introduction","title":"... false, 6 out of 10 possible combinations 'true'.","text":"","category":"section"},{"location":"#Question-3-1","page":"Introduction","title":"Question 3","text":"","category":"section"},{"location":"#Which-of-the-following-must-be-true?-1","page":"Introduction","title":"Which of the following must be true?","text":"","category":"section"},{"location":"#a)-If-you-call-home-on-Monday-then-your-Tuesday-and-Friday-activity-must-be-the-same.-1","page":"Introduction","title":"a) If you call home on Monday then your Tuesday and Friday activity must be the same.","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"checkfeasible(\"mo == 'callhome' ==> tu == fr\", myls, force=true)","category":"page"},{"location":"#...-false,-17-out-of-18-possible-combinations-'true'.-1","page":"Introduction","title":"... false, 17 out of 18 possible combinations 'true'.","text":"","category":"section"},{"location":"#b)-If-you-call-home-on-Tuesday-then-your-Monday-and-Friday-activity-must-be-the-same.-1","page":"Introduction","title":"b) If you call home on Tuesday then your Monday and Friday activity must be the same.","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"checkfeasible(\"tu == 'callhome' ==> mo == fr\", myls, force=true)","category":"page"},{"location":"#...-false,-17-out-of-18-possible-combinations-'true'.-2","page":"Introduction","title":"... false, 17 out of 18 possible combinations 'true'.","text":"","category":"section"},{"location":"#c)-If-you-call-home-on-Wednesday-then-your-Monday-and-Saturday-activity-must-be-the-same.-1","page":"Introduction","title":"c) If you call home on Wednesday then your Monday and Saturday activity must be the same.","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"checkfeasible(\"we == 'callhome' ==> mo == sa\", myls, force=true)","category":"page"},{"location":"#...-true,-18-out-of-18-possible-combinations-'true'.-1","page":"Introduction","title":"... true, 18 out of 18 possible combinations 'true'.","text":"","category":"section"},{"location":"#d)-If-you-call-home-on-Friday-then-your-Tuesday-and-Sunday-activity-must-be-the-same.-1","page":"Introduction","title":"d) If you call home on Friday then your Tuesday and Sunday activity must be the same.","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"checkfeasible(\"fr == 'callhome' ==> tu == su\", myls, force=true)","category":"page"},{"location":"#...-false,-16-out-of-18-possible-combinations-'true'.-1","page":"Introduction","title":"... false, 16 out of 18 possible combinations 'true'.","text":"","category":"section"},{"location":"#e)-If-you-call-home-on-Saturday-then-your-Monday-and-Wednesday-activity-must-be-the-same.-1","page":"Introduction","title":"e) If you call home on Saturday then your Monday and Wednesday activity must be the same.","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"checkfeasible(\"sa == 'callhome' ==> mo == we\", myls, force=true)","category":"page"},{"location":"#...-false,-16-out-of-18-possible-combinations-'true'.-2","page":"Introduction","title":"... false, 16 out of 18 possible combinations 'true'.","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"```","category":"page"}]
}
