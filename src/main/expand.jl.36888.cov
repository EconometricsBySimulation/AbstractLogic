        - function expand(x::LogicalCombo, mykeys::Union{Array{String},Array{String,1}}, myvalues::Union{Array{Any},Array{Int},Array{String,1}})
       40   isempty(mykeys) && return x
        - 
       20   keyset = map(x->Symbol(x), mykeys)
       20   mydomain = [myvalues for i in 1:length(mykeys)]
        - 
       40   (size(x)[2]==0) && return LogicalCombo(keyset, mydomain, fill(true,*(length.(mydomain)...)))
        - 
       28   foreach(y -> (y ∈ x.keys) && throw("key :$y already defined!") , keyset)
        - 
       14   expander = *(length.(mydomain)...)
        7   outlogical = fill(x.logical, each = expander)
        - 
        7   LogicalCombo([x.keys..., keyset...], [x.domain..., mydomain...], outlogical)
        - end
        - 
        - function expand(x::LogicalCombo; kwargs...)
        2   if isempty(kwargs)
        -     return x
        2   elseif size(x)[2]==0
        1     return LogicalCombo([kwargs...])
        -   else
        0     mykeys = []; mydomain = []
        0     for (kw, val) in kwargs;
        -         push!(mykeys, kw)
        0         push!(mydomain, val)
        -     end
        -   end
        - 
        0   foreach(y -> (y ∈ x.keys) && throw("key :$y already defined!") , mykeys)
        - 
        0   expander = *(length.(mydomain)...)
        0   outlogical = fill(x.logical, each = expander)
        - 
        0   LogicalCombo([x.keys..., mykeys...], [x.domain..., mydomain...], outlogical)
        - end
        - 
        - function expand(logicset::LogicalCombo, x::Union{Array{Pair{Symbol, Any}}, Array{Pair{Symbol,UnitRange{Int64}},1}})
        - 
        2     (length(logicset.keys) == 0) && return LogicalCombo(x)
        0     (length(x) == 0) && return logicset
        - 
        0     mykeys = []; mydomain = []
        0     for (kw, val) in x;
        -         push!(mykeys, kw)
        0         push!(mydomain, val)
        -     end
        - 
        0   foreach(y -> (y ∈ logicset.keys) && throw("key :$y already defined!"), mykeys)
        - 
        0   expander = *(length.(mydomain)...)
        0   outlogical = fill(logicset.logical, each = expander)
        - 
        0   LogicalCombo([logicset.keys..., mykeys...], [logicset.domain..., mydomain...], outlogical)
        - end
        - 
